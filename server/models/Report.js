'use strict';
// decide whether or not to include a schema for reports

const mongoose = require('mongoose');
const Schema = mongoose.Schema;

let ReportSchema = new Schema({ report: Schema.Types.Mixed }, { strict: false});

let Report = mongoose.model('Report', ReportSchema, 'reports');

module.exports = Report;

// sample explicit schema: incomplete

// {
//    let reports = [{
//     "reportTitle": String,
//     "stats": {
//     "suites": Number,
//     "tests": Number,
//     "passes": Number,
//     "pending": Number,
//     "failures": Number,
//     "start": "2017-01-05T14:41:46.163Z",
//     "end": "2017-01-05T14:46:36.661Z",
//     "duration": Number,
//     "testsRegistered": Number,
//     "passPercent": Number,
//     "pendingPercent": Number,
//     "other": Number,
//     "hasOther": Boolean,
//     "skipped": Number,
//     "hasSkipped": Boolean,
//     "passPercentClass": String,
//     "pendingPercentClass": String
//     },
//     "suites": {
//     "title": String,
//     "suites": [
//     {
//     "title": String,
//     "suites": [
//     {
//     "title": String,
//     "suites": Array,
//     "tests": [
//     {
//     "title": String,
//     "fullTitle": String,
//     "timedOut": Boolean,
//     "duration": Number,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": String,
//     "isRoot": Boolean,
//     "uuid": String,
//     "parentUUID": String,
//     "skipped": Boolean
//     },
//     {
//     "title": String,
//     "fullTitle": String
//     "timedOut": Boolean,
//     "duration": Number,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": String,
//     "isRoot": Boolean,
//     "uuid": String,
//     "parentUUID": String,
//     "skipped": Boolean
//     }
//     ],
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": Number,
//     "file": String,
//     "uuid": String,
//     "fullFile": String,
//     "passes": Array,
//     "failures": Array,
//     "skipped": [
//     {
//     "title": "should returns illegal vehicle turns from vendor VideoNext",
//     "fullTitle": "NPDISC-2414  As the CT, I want to know the counts and percentage of cars making illegal moves. should returns illegal vehicle turns from vendor VideoNext",
//     "timedOut": Boolean,
//     "duration": Number,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": String,
//     "isRoot": Boolean,
//     "uuid": String,
//     "parentUUID": String,
//     "skipped": Boolean
//     },
//     {
//     "title": String,
//     "fullTitle": String,
//     "timedOut": Boolean,
//     "duration": Number,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": String,
//     "isRoot": Boolean,
//     "uuid": String,
//     "parentUUID": String,
//     "skipped": Boolean
//     }
//     ],
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": Number,
//     "totalPasses": Number,
//     "totalFailures": Number,
//     "totalPending": Number,
//     "totalSkipped": Number,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": Number
//     }
//     ],
//     "tests": Array,
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": Number,
//     "file": String,
//     "uuid": String,
//     "fullFile": String,
//     "passes": Array,
//     "failures": Array,
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": Number,
//     "totalPasses": Number,
//     "totalFailures": Number,
//     "totalPending": Number,
//     "totalSkipped": Number,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": Number
//     },
//     {
//     "title": String,
//     "suites": [
//     {
//     "title": String,
//     "suites": Array,
//     "tests": [
//     {
//     "title": String,
//     "fullTitle": String,
//     "timedOut": Boolean,
//     "duration": Number,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">/** Feature Comments **/</span><br><span class=\"hljs-comment\">/* Illegal Turns (both V &amp; I) graph, illegal term needs to be removed completely <br>and need to be replaced by 'Turning Movement' */</span><br><span class=\"hljs-comment\">//Waits for L1 Graph 1 to become visible</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"#cob-graph-1 .panel-title\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br><br><span class=\"hljs-comment\">//Panel Title contains \"Turning Movement\", and not \"Illegal\"</span><br>driver.findElement(By.css(<span class=\"hljs-string\">'#cob-graph-1 .panel-title'</span>)).getText().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selectedText</span>) </span>{<br>    expect(selectedText).to.match(<span class=\"hljs-regexp\">/Turning\\sMovement/</span>);<br>    expect(selectedText).to.not.match(<span class=\"hljs-regexp\">/Illegal/</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "f0c0e5a6-1c21-4aae-87b3-c3be08eac18a",
//     "parentUUID": "9585a941-b6ed-47d2-9e55-ab897d0ad277",
//     "skipped": Boolean
//     },
//     {
//     "title": "on L2 graph dropdown",
//     "fullTitle": "NPDISC-5910 Replace word \"Illegal\" from every UI on L2 graph dropdown",
//     "timedOut": Boolean,
//     "duration": 0,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">/** Feature Comments **/</span><br><span class=\"hljs-comment\">/* Illegal Turns (both V &amp; I) graph, illegal term needs to be removed completely <br> and need to be replaced by 'Turning Movement' */</span><br><span class=\"hljs-comment\">// Clicks L1 graph to get to L2</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"#bar1\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>el.click();<br><span class=\"hljs-comment\">// L2 graph Type dropdown</span><br><span class=\"hljs-comment\">// matches \"Turning Movement\"</span><br><span class=\"hljs-comment\">// does not match \"Illegal\"</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.id(<span class=\"hljs-string\">\"typeValue\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>)<br><br>el.getAttribute(<span class=\"hljs-string\">'textContent'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selected</span>) </span>{<br>    expect(selected).to.match(<span class=\"hljs-regexp\">/Turning\\sMovement/</span>);<br>    expect(selected).to.not.match(<span class=\"hljs-regexp\">/Illegal/</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "72bcdd22-c237-46db-aedf-22cd1bd2344e",
//     "parentUUID": "9585a941-b6ed-47d2-9e55-ab897d0ad277",
//     "skipped": Boolean
//     }
//     ],
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "file": "/test/featureValidations/NPDISC-5910.js",
//     "uuid": "9585a941-b6ed-47d2-9e55-ab897d0ad277",
//     "fullFile": "/Users/v318151/Projects_KCS/psm_feature_validation/test/featureValidations/NPDISC-5910.js",
//     "passes": Array,
//     "failures": Array,
//     "skipped": [
//     {
//     "title": "on L1 graph 1 Panel Title",
//     "fullTitle": "NPDISC-5910 Replace word \"Illegal\" from every UI on L1 graph 1 Panel Title",
//     "timedOut": Boolean,
//     "duration": 0,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">/** Feature Comments **/</span><br><span class=\"hljs-comment\">/* Illegal Turns (both V &amp; I) graph, illegal term needs to be removed completely <br>and need to be replaced by 'Turning Movement' */</span><br><span class=\"hljs-comment\">//Waits for L1 Graph 1 to become visible</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"#cob-graph-1 .panel-title\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br><br><span class=\"hljs-comment\">//Panel Title contains \"Turning Movement\", and not \"Illegal\"</span><br>driver.findElement(By.css(<span class=\"hljs-string\">'#cob-graph-1 .panel-title'</span>)).getText().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selectedText</span>) </span>{<br>    expect(selectedText).to.match(<span class=\"hljs-regexp\">/Turning\\sMovement/</span>);<br>    expect(selectedText).to.not.match(<span class=\"hljs-regexp\">/Illegal/</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "f0c0e5a6-1c21-4aae-87b3-c3be08eac18a",
//     "parentUUID": "9585a941-b6ed-47d2-9e55-ab897d0ad277",
//     "skipped": Boolean
//     },
//     {
//     "title": "on L2 graph dropdown",
//     "fullTitle": "NPDISC-5910 Replace word \"Illegal\" from every UI on L2 graph dropdown",
//     "timedOut": Boolean,
//     "duration": 0,
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">/** Feature Comments **/</span><br><span class=\"hljs-comment\">/* Illegal Turns (both V &amp; I) graph, illegal term needs to be removed completely <br> and need to be replaced by 'Turning Movement' */</span><br><span class=\"hljs-comment\">// Clicks L1 graph to get to L2</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"#bar1\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>el.click();<br><span class=\"hljs-comment\">// L2 graph Type dropdown</span><br><span class=\"hljs-comment\">// matches \"Turning Movement\"</span><br><span class=\"hljs-comment\">// does not match \"Illegal\"</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.id(<span class=\"hljs-string\">\"typeValue\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>)<br><br>el.getAttribute(<span class=\"hljs-string\">'textContent'</span>).then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">selected</span>) </span>{<br>    expect(selected).to.match(<span class=\"hljs-regexp\">/Turning\\sMovement/</span>);<br>    expect(selected).to.not.match(<span class=\"hljs-regexp\">/Illegal/</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "72bcdd22-c237-46db-aedf-22cd1bd2344e",
//     "parentUUID": "9585a941-b6ed-47d2-9e55-ab897d0ad277",
//     "skipped": Boolean
//     }
//     ],
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 2,
//     "totalPasses": 0,
//     "totalFailures": 0,
//     "totalPending": 0,
//     "totalSkipped": 2,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 0
//     }
//     ],
//     "tests": Array,
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "file": "/test/featureValidations/NPDISC-5910.js",
//     "uuid": "6aebcaa3-a2cb-45ae-8e37-45ca2eef6bab",
//     "fullFile": "/Users/v318151/Projects_KCS/psm_feature_validation/test/featureValidations/NPDISC-5910.js",
//     "passes": Array,
//     "failures": Array,
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 0,
//     "totalPasses": 0,
//     "totalFailures": 0,
//     "totalPending": 0,
//     "totalSkipped": 0,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 0
//     },
//     {
//     "title": "PSM API Smoke Test - Login",
//     "suites": Array,
//     "tests": [
//     {
//     "title": "should give me  X-AUTH-TOKEN toke in header",
//     "fullTitle": "PSM API Smoke Test - Login should give me  X-AUTH-TOKEN toke in header",
//     "timedOut": Boolean,
//     "duration": 0,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "psm<br>.post(loginpath)<br>.set(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>.set(<span class=\"hljs-string\">'Cache-Control'</span>, <span class=\"hljs-string\">'no-cache'</span>)<br>.send(<span class=\"hljs-string\">'{\"username\": \"'</span>+psmRestUser+<span class=\"hljs-string\">'\", \"password\": \"'</span>+psmRestPasswd+<span class=\"hljs-string\">'\"}'</span>)<br>.expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!err) {<br>        response = res;<br>        <span class=\"hljs-keyword\">var</span> authToke = response.header[<span class=\"hljs-string\">'x-auth-token'</span>];<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Auth Token from the Validate Login :'</span>+authToke);<br>        chai.expect(authToke).to.not.be.null;<br>        chai.expect(authToke).to.be.a(<span class=\"hljs-string\">'string'</span>);<br>        chai.expect(authToke.length).to.not.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(err);<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    }<br>});",
//     "err": {
//     "name": "Error",
//     "message": "expected 200 \"OK\", got 502 \"Bad Gateway\"",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: expected <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">\"OK\"</span>, got <span class=\"hljs-number\">502</span> <span class=\"hljs-string\">\"Bad Gateway\"</span><br>  at Test._assertStatus (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">266</span>:<span class=\"hljs-number\">12</span>)<br>  at Test._assertFunction (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">281</span>:<span class=\"hljs-number\">11</span>)<br>  at Test.assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">18</span>)<br>  at assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">131</span>:<span class=\"hljs-number\">12</span>)<br>  at node_modules/supertest/lib/test.js:<span class=\"hljs-number\">128</span>:<span class=\"hljs-number\">5</span><br>  at Test.Request.callback (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">631</span>:<span class=\"hljs-number\">3</span>)<br>  at IncomingMessage.&lt;anonymous&gt; (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">795</span>:<span class=\"hljs-number\">18</span>)<br>  at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>  at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>  at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "7751f89b-ee38-420b-a3ce-296826e24c3f",
//     "parentUUID": "7469a51b-6078-4833-a5bf-d9c394696173",
//     "skipped": Boolean
//     }
//     ],
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "file": "/test/smoketests/psm/validate-login.js",
//     "uuid": "7469a51b-6078-4833-a5bf-d9c394696173",
//     "fullFile": "/Users/v318151/Projects_KCS/psm_feature_validation/test/smoketests/psm/validate-login.js",
//     "passes": Array,
//     "failures": [
//     {
//     "title": "should give me  X-AUTH-TOKEN toke in header",
//     "fullTitle": "PSM API Smoke Test - Login should give me  X-AUTH-TOKEN toke in header",
//     "timedOut": Boolean,
//     "duration": 0,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "psm<br>.post(loginpath)<br>.set(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>.set(<span class=\"hljs-string\">'Cache-Control'</span>, <span class=\"hljs-string\">'no-cache'</span>)<br>.send(<span class=\"hljs-string\">'{\"username\": \"'</span>+psmRestUser+<span class=\"hljs-string\">'\", \"password\": \"'</span>+psmRestPasswd+<span class=\"hljs-string\">'\"}'</span>)<br>.expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!err) {<br>        response = res;<br>        <span class=\"hljs-keyword\">var</span> authToke = response.header[<span class=\"hljs-string\">'x-auth-token'</span>];<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Auth Token from the Validate Login :'</span>+authToke);<br>        chai.expect(authToke).to.not.be.null;<br>        chai.expect(authToke).to.be.a(<span class=\"hljs-string\">'string'</span>);<br>        chai.expect(authToke.length).to.not.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(err);<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    }<br>});",
//     "err": {
//     "name": "Error",
//     "message": "expected 200 \"OK\", got 502 \"Bad Gateway\"",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: expected <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">\"OK\"</span>, got <span class=\"hljs-number\">502</span> <span class=\"hljs-string\">\"Bad Gateway\"</span><br>  at Test._assertStatus (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">266</span>:<span class=\"hljs-number\">12</span>)<br>  at Test._assertFunction (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">281</span>:<span class=\"hljs-number\">11</span>)<br>  at Test.assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">18</span>)<br>  at assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">131</span>:<span class=\"hljs-number\">12</span>)<br>  at node_modules/supertest/lib/test.js:<span class=\"hljs-number\">128</span>:<span class=\"hljs-number\">5</span><br>  at Test.Request.callback (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">631</span>:<span class=\"hljs-number\">3</span>)<br>  at IncomingMessage.&lt;anonymous&gt; (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">795</span>:<span class=\"hljs-number\">18</span>)<br>  at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>  at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>  at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "7751f89b-ee38-420b-a3ce-296826e24c3f",
//     "parentUUID": "7469a51b-6078-4833-a5bf-d9c394696173",
//     "skipped": Boolean
//     }
//     ],
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 1,
//     "totalPasses": 0,
//     "totalFailures": 1,
//     "totalPending": 0,
//     "totalSkipped": 0,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 0
//     },
//     {
//     "title": "PSM UI Smoke Test - Login",
//     "suites": Array,
//     "tests": [
//     {
//     "title": "should find correct title",
//     "fullTitle": "PSM UI Smoke Test - Login should find correct title",
//     "timedOut": Boolean,
//     "duration": 24317,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_Verify_Title.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "4fa0655b-856c-4311-a3fd-fcb104d7ffd3",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     },
//     {
//     "title": "should allow valid user login",
//     "fullTitle": "PSM UI Smoke Test - Login should allow valid user login",
//     "timedOut": Boolean,
//     "duration": 120002,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL + <span class=\"hljs-string\">\"/#/login\"</span>);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).sendKeys(psmWebPasswd);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).sendKeys(psmWebUser);<br>driver.findElement(By.className(<span class=\"hljs-string\">\"btn-block\"</span>)).click()<br><span class=\"hljs-keyword\">var</span> signoutLink = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(signoutLink), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'valid user login.png'</span>);<br>});<br>driver.findElement(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)).click();",
//     "err": {
//     "name": "Error",
//     "message": "Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">120000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves.<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "9b4d2ed3-250c-4754-ba65-aa9798938b30",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     }
//     ],
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "file": "/test/smoketests/psm/WebSiteTesting-PSMLoginLogout.js",
//     "uuid": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "fullFile": "/Users/v318151/Projects_KCS/psm_feature_validation/test/smoketests/psm/WebSiteTesting-PSMLoginLogout.js",
//     "passes": [
//     {
//     "title": "should find correct title",
//     "fullTitle": "PSM UI Smoke Test - Login should find correct title",
//     "timedOut": Boolean,
//     "duration": 24317,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_Verify_Title.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "4fa0655b-856c-4311-a3fd-fcb104d7ffd3",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     }
//     ],
//     "failures": [
//     {
//     "title": "should allow valid user login",
//     "fullTitle": "PSM UI Smoke Test - Login should allow valid user login",
//     "timedOut": Boolean,
//     "duration": 120002,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL + <span class=\"hljs-string\">\"/#/login\"</span>);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).sendKeys(psmWebPasswd);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).sendKeys(psmWebUser);<br>driver.findElement(By.className(<span class=\"hljs-string\">\"btn-block\"</span>)).click()<br><span class=\"hljs-keyword\">var</span> signoutLink = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(signoutLink), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'valid user login.png'</span>);<br>});<br>driver.findElement(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)).click();",
//     "err": {
//     "name": "Error",
//     "message": "Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">120000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves.<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "9b4d2ed3-250c-4754-ba65-aa9798938b30",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     }
//     ],
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 2,
//     "totalPasses": 1,
//     "totalFailures": 1,
//     "totalPending": 0,
//     "totalSkipped": 0,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 144319
//     },
//     {
//     "title": "Thingspace.com API Smoke Test - Devices",
//     "suites": Array,
//     "tests": [
//     {
//     "title": "should list devices ",
//     "fullTitle": "Thingspace.com API Smoke Test - Devices should list devices ",
//     "timedOut": Boolean,
//     "duration": 6926,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "ThingSpaceServer<br>        .post(<span class=\"hljs-string\">\"/api/m2m/v1/devices/actions/list\"</span>)<br>        .set(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .set(<span class=\"hljs-string\">'VZ-M2M-Token'</span>, <span class=\"hljs-string\">'abc'</span>)<br>        .set(<span class=\"hljs-string\">'Authorization'</span>, <span class=\"hljs-string\">'Bearer 89ba225e1438e95bd05c3cc288d3591'</span>)<br>        .set(<span class=\"hljs-string\">'Accept'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .send(<span class=\"hljs-string\">'{}'</span>)<br>        .expect(<span class=\"hljs-string\">\"Content-type\"</span>, <span class=\"hljs-regexp\">/json/</span>)<br>        .expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>        .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            <span class=\"hljs-comment\">// HTTP status should be 200</span><br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'hasMoreData'</span>);<br>            chai.expect(res.body.hasMoreData).to.equal(<span class=\"hljs-literal\">Boolean</span>);<br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'devices'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>]).to.have.property(<span class=\"hljs-string\">'accountName'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>].accountName).to.equal(<span class=\"hljs-string\">'TestAccount-1'</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Total Devices :'</span>+res.body.devices.length);<br>            done();<br>        });",
//     "isRoot": Boolean,
//     "uuid": "11fcaffc-b0c4-4c88-9fab-3cbc235bd601",
//     "parentUUID": "a33694f6-08e8-446a-a04d-a4606535f2b7",
//     "skipped": Boolean
//     }
//     ],
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "file": "/test/smoketests/thingspace/APITesting-ListDevices.js",
//     "uuid": "a33694f6-08e8-446a-a04d-a4606535f2b7",
//     "fullFile": "/Users/v318151/Projects_KCS/psm_feature_validation/test/smoketests/thingspace/APITesting-ListDevices.js",
//     "passes": [
//     {
//     "title": "should list devices ",
//     "fullTitle": "Thingspace.com API Smoke Test - Devices should list devices ",
//     "timedOut": Boolean,
//     "duration": 6926,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "ThingSpaceServer<br>        .post(<span class=\"hljs-string\">\"/api/m2m/v1/devices/actions/list\"</span>)<br>        .set(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .set(<span class=\"hljs-string\">'VZ-M2M-Token'</span>, <span class=\"hljs-string\">'abc'</span>)<br>        .set(<span class=\"hljs-string\">'Authorization'</span>, <span class=\"hljs-string\">'Bearer 89ba225e1438e95bd05c3cc288d3591'</span>)<br>        .set(<span class=\"hljs-string\">'Accept'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .send(<span class=\"hljs-string\">'{}'</span>)<br>        .expect(<span class=\"hljs-string\">\"Content-type\"</span>, <span class=\"hljs-regexp\">/json/</span>)<br>        .expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>        .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            <span class=\"hljs-comment\">// HTTP status should be 200</span><br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'hasMoreData'</span>);<br>            chai.expect(res.body.hasMoreData).to.equal(<span class=\"hljs-literal\">Boolean</span>);<br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'devices'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>]).to.have.property(<span class=\"hljs-string\">'accountName'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>].accountName).to.equal(<span class=\"hljs-string\">'TestAccount-1'</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Total Devices :'</span>+res.body.devices.length);<br>            done();<br>        });",
//     "isRoot": Boolean,
//     "uuid": "11fcaffc-b0c4-4c88-9fab-3cbc235bd601",
//     "parentUUID": "a33694f6-08e8-446a-a04d-a4606535f2b7",
//     "skipped": Boolean
//     }
//     ],
//     "failures": Array,
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 1,
//     "totalPasses": 1,
//     "totalFailures": 0,
//     "totalPending": 0,
//     "totalSkipped": 0,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 6926
//     },
//     {
//     "title": "Thingspace.com UI Smoke Test - Login",
//     "suites": Array,
//     "tests": [
//     {
//     "title": "TEST_CASE_001 - should find correct title",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_001 - should find correct title",
//     "timedOut": Boolean,
//     "duration": 13766,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(thingSpaceURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'TS - Develop - Overview'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_001.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "d10df3fd-631b-4592-860f-2dd36089ce69",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     },
//     {
//     "title": "TEST_CASE_002 - Click On Login",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_002 - Click On Login",
//     "timedOut": Boolean,
//     "duration": 331,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">//driver.wait(untilBy.linkText(\"Sign in / Register\")</span><br>driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)).click();<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'username'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'password'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_002.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "6c87eb0a-02cd-4b46-bc4c-5ec475ade1cc",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     }
//     ],
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "file": "/test/smoketests/thingspace/WebSiteTesting-ThingSpaceHomePage.js",
//     "uuid": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "fullFile": "/Users/v318151/Projects_KCS/psm_feature_validation/test/smoketests/thingspace/WebSiteTesting-ThingSpaceHomePage.js",
//     "passes": [
//     {
//     "title": "TEST_CASE_001 - should find correct title",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_001 - should find correct title",
//     "timedOut": Boolean,
//     "duration": 13766,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(thingSpaceURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'TS - Develop - Overview'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_001.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "d10df3fd-631b-4592-860f-2dd36089ce69",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     },
//     {
//     "title": "TEST_CASE_002 - Click On Login",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_002 - Click On Login",
//     "timedOut": Boolean,
//     "duration": 331,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">//driver.wait(untilBy.linkText(\"Sign in / Register\")</span><br>driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)).click();<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'username'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'password'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_002.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "6c87eb0a-02cd-4b46-bc4c-5ec475ade1cc",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     }
//     ],
//     "failures": Array,
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 2,
//     "totalPasses": 2,
//     "totalFailures": 0,
//     "totalPending": 0,
//     "totalSkipped": 0,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 14097
//     }
//     ],
//     "tests": Array,
//     "pending": Array,
//     "root": Boolean,
//     "_timeout": 120000,
//     "uuid": "5fa9e75d-6760-4a40-991b-a7acc5579302",
//     "fullFile": "",
//     "file": "",
//     "passes": Array,
//     "failures": Array,
//     "skipped": Array,
//     "hasTests": Boolean,
//     "hasSuites": Boolean,
//     "totalTests": 0,
//     "totalPasses": 0,
//     "totalFailures": 0,
//     "totalPending": 0,
//     "totalSkipped": 0,
//     "hasPasses": Boolean,
//     "hasFailures": Boolean,
//     "hasPending": Boolean,
//     "hasSkipped": Boolean,
//     "duration": 0,
//     "rootEmpty": Boolean
//     },
//     "allTests": [
//     {
//     "title": "should give me  X-AUTH-TOKEN toke in header",
//     "fullTitle": "PSM API Smoke Test - Login should give me  X-AUTH-TOKEN toke in header",
//     "timedOut": Boolean,
//     "duration": 0,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "psm<br>.post(loginpath)<br>.set(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>.set(<span class=\"hljs-string\">'Cache-Control'</span>, <span class=\"hljs-string\">'no-cache'</span>)<br>.send(<span class=\"hljs-string\">'{\"username\": \"'</span>+psmRestUser+<span class=\"hljs-string\">'\", \"password\": \"'</span>+psmRestPasswd+<span class=\"hljs-string\">'\"}'</span>)<br>.expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!err) {<br>        response = res;<br>        <span class=\"hljs-keyword\">var</span> authToke = response.header[<span class=\"hljs-string\">'x-auth-token'</span>];<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Auth Token from the Validate Login :'</span>+authToke);<br>        chai.expect(authToke).to.not.be.null;<br>        chai.expect(authToke).to.be.a(<span class=\"hljs-string\">'string'</span>);<br>        chai.expect(authToke.length).to.not.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(err);<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    }<br>});",
//     "err": {
//     "name": "Error",
//     "message": "expected 200 \"OK\", got 502 \"Bad Gateway\"",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: expected <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">\"OK\"</span>, got <span class=\"hljs-number\">502</span> <span class=\"hljs-string\">\"Bad Gateway\"</span><br>  at Test._assertStatus (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">266</span>:<span class=\"hljs-number\">12</span>)<br>  at Test._assertFunction (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">281</span>:<span class=\"hljs-number\">11</span>)<br>  at Test.assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">18</span>)<br>  at assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">131</span>:<span class=\"hljs-number\">12</span>)<br>  at node_modules/supertest/lib/test.js:<span class=\"hljs-number\">128</span>:<span class=\"hljs-number\">5</span><br>  at Test.Request.callback (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">631</span>:<span class=\"hljs-number\">3</span>)<br>  at IncomingMessage.&lt;anonymous&gt; (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">795</span>:<span class=\"hljs-number\">18</span>)<br>  at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>  at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>  at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "e409c496-ab76-486c-bc0f-8659fd377ee3",
//     "parentUUID": "7469a51b-6078-4833-a5bf-d9c394696173",
//     "skipped": Boolean
//     },
//     {
//     "title": "should find correct title",
//     "fullTitle": "PSM UI Smoke Test - Login should find correct title",
//     "timedOut": Boolean,
//     "duration": 24317,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_Verify_Title.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "fd9948dc-af79-4514-b27b-ea87b32be38b",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     },
//     {
//     "title": "should allow valid user login",
//     "fullTitle": "PSM UI Smoke Test - Login should allow valid user login",
//     "timedOut": Boolean,
//     "duration": 120002,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL + <span class=\"hljs-string\">\"/#/login\"</span>);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).sendKeys(psmWebPasswd);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).sendKeys(psmWebUser);<br>driver.findElement(By.className(<span class=\"hljs-string\">\"btn-block\"</span>)).click()<br><span class=\"hljs-keyword\">var</span> signoutLink = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(signoutLink), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'valid user login.png'</span>);<br>});<br>driver.findElement(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)).click();",
//     "err": {
//     "name": "Error",
//     "message": "Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">120000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves.<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "1a334fb2-9c65-4c22-8ae3-c53d7ba97f90",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     },
//     {
//     "title": "should list devices ",
//     "fullTitle": "Thingspace.com API Smoke Test - Devices should list devices ",
//     "timedOut": Boolean,
//     "duration": 6926,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "ThingSpaceServer<br>        .post(<span class=\"hljs-string\">\"/api/m2m/v1/devices/actions/list\"</span>)<br>        .set(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .set(<span class=\"hljs-string\">'VZ-M2M-Token'</span>, <span class=\"hljs-string\">'abc'</span>)<br>        .set(<span class=\"hljs-string\">'Authorization'</span>, <span class=\"hljs-string\">'Bearer 89ba225e1438e95bd05c3cc288d3591'</span>)<br>        .set(<span class=\"hljs-string\">'Accept'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .send(<span class=\"hljs-string\">'{}'</span>)<br>        .expect(<span class=\"hljs-string\">\"Content-type\"</span>, <span class=\"hljs-regexp\">/json/</span>)<br>        .expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>        .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            <span class=\"hljs-comment\">// HTTP status should be 200</span><br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'hasMoreData'</span>);<br>            chai.expect(res.body.hasMoreData).to.equal(<span class=\"hljs-literal\">Boolean</span>);<br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'devices'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>]).to.have.property(<span class=\"hljs-string\">'accountName'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>].accountName).to.equal(<span class=\"hljs-string\">'TestAccount-1'</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Total Devices :'</span>+res.body.devices.length);<br>            done();<br>        });",
//     "isRoot": Boolean,
//     "uuid": "cecd367c-e106-4de5-9c59-8714d405f832",
//     "parentUUID": "a33694f6-08e8-446a-a04d-a4606535f2b7",
//     "skipped": Boolean
//     },
//     {
//     "title": "TEST_CASE_001 - should find correct title",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_001 - should find correct title",
//     "timedOut": Boolean,
//     "duration": 13766,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(thingSpaceURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'TS - Develop - Overview'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_001.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "f12de639-87e2-4c01-9bfe-8bbe5f325284",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     },
//     {
//     "title": "TEST_CASE_002 - Click On Login",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_002 - Click On Login",
//     "timedOut": Boolean,
//     "duration": 331,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">//driver.wait(untilBy.linkText(\"Sign in / Register\")</span><br>driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)).click();<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'username'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'password'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_002.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "6ab23b39-a28c-42ee-9c5f-706c6fa0b5d1",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     }
//     ],
//     "allPending": Array,
//     "allPasses": [
//     {
//     "title": "should find correct title",
//     "fullTitle": "PSM UI Smoke Test - Login should find correct title",
//     "timedOut": Boolean,
//     "duration": 24317,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_Verify_Title.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "fbb44b07-5a03-4d43-b402-13f393ec0dda",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     },
//     {
//     "title": "should list devices ",
//     "fullTitle": "Thingspace.com API Smoke Test - Devices should list devices ",
//     "timedOut": Boolean,
//     "duration": 6926,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "ThingSpaceServer<br>        .post(<span class=\"hljs-string\">\"/api/m2m/v1/devices/actions/list\"</span>)<br>        .set(<span class=\"hljs-string\">'content-type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .set(<span class=\"hljs-string\">'VZ-M2M-Token'</span>, <span class=\"hljs-string\">'abc'</span>)<br>        .set(<span class=\"hljs-string\">'Authorization'</span>, <span class=\"hljs-string\">'Bearer 89ba225e1438e95bd05c3cc288d3591'</span>)<br>        .set(<span class=\"hljs-string\">'Accept'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>        .send(<span class=\"hljs-string\">'{}'</span>)<br>        .expect(<span class=\"hljs-string\">\"Content-type\"</span>, <span class=\"hljs-regexp\">/json/</span>)<br>        .expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>        .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            <span class=\"hljs-comment\">// HTTP status should be 200</span><br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'hasMoreData'</span>);<br>            chai.expect(res.body.hasMoreData).to.equal(<span class=\"hljs-literal\">Boolean</span>);<br>            chai.expect(res.body).to.have.property(<span class=\"hljs-string\">'devices'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>]).to.have.property(<span class=\"hljs-string\">'accountName'</span>);<br>            chai.expect(res.body.devices[<span class=\"hljs-number\">0</span>].accountName).to.equal(<span class=\"hljs-string\">'TestAccount-1'</span>);<br>            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Total Devices :'</span>+res.body.devices.length);<br>            done();<br>        });",
//     "isRoot": Boolean,
//     "uuid": "b4273d23-a1d6-45d6-872e-8d761004a6cc",
//     "parentUUID": "a33694f6-08e8-446a-a04d-a4606535f2b7",
//     "skipped": Boolean
//     },
//     {
//     "title": "TEST_CASE_001 - should find correct title",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_001 - should find correct title",
//     "timedOut": Boolean,
//     "duration": 13766,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(thingSpaceURL);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'TS - Develop - Overview'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_001.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "3f7402ef-b394-4bb7-bcb5-a0fe92b10771",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     },
//     {
//     "title": "TEST_CASE_002 - Click On Login",
//     "fullTitle": "Thingspace.com UI Smoke Test - Login TEST_CASE_002 - Click On Login",
//     "timedOut": Boolean,
//     "duration": 331,
//     "state": "passed",
//     "speed": "slow",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">//driver.wait(untilBy.linkText(\"Sign in / Register\")</span><br>driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.css(<span class=\"hljs-string\">'span.navbar__ts2__dropdownToggle--signin'</span>)).click();<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'username'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.wait(until.elementLocated(By.name(<span class=\"hljs-string\">'password'</span>)), <span class=\"hljs-number\">5000</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'TEST_CASE_002.png'</span>);<br>});",
//     "isRoot": Boolean,
//     "uuid": "9bb9ed5e-2b37-4c85-a66d-6ab246315958",
//     "parentUUID": "65701026-3b67-4538-b4dc-9cad5fcd91fd",
//     "skipped": Boolean
//     }
//     ],
//     "allFailures": [
//     {
//     "title": "\"before all\" hook",
//     "fullTitle": "As the CT, I want to know the counts and percentage of cars making illegal moves. \"before all\" hook",
//     "timedOut": Boolean,
//     "duration": 0,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"    REST url : \"</span> + psmURL + <span class=\"hljs-string\">\"\\n\"</span>);<br>psmapiserver<br>        .post(loginpath)<br>        .set(loginHeaders)<br>        .send(<span class=\"hljs-string\">'{\"username\": \"'</span>+psmRestUser+<span class=\"hljs-string\">'\", \"password\": \"'</span>+psmRestPasswd+<span class=\"hljs-string\">'\"}'</span>)<br>        .expect(<span class=\"hljs-number\">200</span>)<br>        .end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>            <span class=\"hljs-keyword\">if</span> (!err) {<br>                authtoken = res.header[<span class=\"hljs-string\">'x-auth-token'</span>];<br>                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Auth token from the Jira feature : NPDISC-2414 :-'</span>+authtoken);<br>                chai.expect(authtoken).to.not.be.null;<br>                chai.expect(authtoken).to.be.a(<span class=\"hljs-string\">'string'</span>);<br>                chai.expect(authtoken.length).to.not.equal(<span class=\"hljs-number\">0</span>);<br>                done();<br>            } <span class=\"hljs-keyword\">else</span> {<br>                <span class=\"hljs-built_in\">console</span>.log(err);<br>                <span class=\"hljs-keyword\">throw</span> err;<br>            }<br>        });",
//     "err": {
//     "name": "Error",
//     "message": "expected 200 \"OK\", got 502 \"Bad Gateway\"",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: expected <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">\"OK\"</span>, got <span class=\"hljs-number\">502</span> <span class=\"hljs-string\">\"Bad Gateway\"</span><br>  at Test._assertStatus (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">266</span>:<span class=\"hljs-number\">12</span>)<br>  at Test._assertFunction (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">281</span>:<span class=\"hljs-number\">11</span>)<br>  at Test.assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">18</span>)<br>  at assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">131</span>:<span class=\"hljs-number\">12</span>)<br>  at node_modules/supertest/lib/test.js:<span class=\"hljs-number\">128</span>:<span class=\"hljs-number\">5</span><br>  at Test.Request.callback (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">631</span>:<span class=\"hljs-number\">3</span>)<br>  at IncomingMessage.&lt;anonymous&gt; (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">795</span>:<span class=\"hljs-number\">18</span>)<br>  at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>  at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>  at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "cf038348-e7c8-4ca4-b72c-d28b39c8ed72",
//     "parentUUID": "7ca53b48-81fd-46ae-8869-7a8e63ec60dd",
//     "skipped": Boolean
//     },
//     {
//     "title": "\"before all\" hook: ret",
//     "fullTitle": "NPDISC-5910 \"before all\" hook: ret",
//     "timedOut": Boolean,
//     "duration": Number,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver = <span class=\"hljs-keyword\">new</span> webdriver.Builder().forBrowser(webdriver.Browser.CHROME).build();<br>driver.manage().window().maximize();<br>driver.accept_untrusted_certs = <span class=\"hljs-literal\">Boolean</span>;<br><span class=\"hljs-comment\">// User logs in</span><br>driver.get(psmURL + <span class=\"hljs-string\">\"/#/login\"</span>);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).sendKeys(psmWebPasswd);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).sendKeys(psmWebUser);<br>driver.findElement(By.className(<span class=\"hljs-string\">\"btn-block\"</span>)).click()<br><span class=\"hljs-comment\">// Clicks the Dashboard tab</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.xpath(<span class=\"hljs-string\">\"//a[@href='#/graphbutton']\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>el.click();<br><span class=\"hljs-comment\">// Clicks the Overview link (\"Vision Zero\")</span><br><span class=\"hljs-keyword\">var</span> el = driver.wait(until.elementLocated(By.xpath(<span class=\"hljs-string\">\"//li[@href='#/overview']\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(el), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>el.click();",
//     "err": {
//     "name": "Error",
//     "message": "Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">120000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves.<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "f2642e1b-b4df-432e-a28d-70dc93278fe1",
//     "parentUUID": "6aebcaa3-a2cb-45ae-8e37-45ca2eef6bab",
//     "skipped": Boolean
//     },
//     {
//     "title": "should give me  X-AUTH-TOKEN toke in header",
//     "fullTitle": "PSM API Smoke Test - Login should give me  X-AUTH-TOKEN toke in header",
//     "timedOut": Boolean,
//     "duration": 0,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "psm<br>.post(loginpath)<br>.set(<span class=\"hljs-string\">'Content-Type'</span>, <span class=\"hljs-string\">'application/json'</span>)<br>.set(<span class=\"hljs-string\">'Cache-Control'</span>, <span class=\"hljs-string\">'no-cache'</span>)<br>.send(<span class=\"hljs-string\">'{\"username\": \"'</span>+psmRestUser+<span class=\"hljs-string\">'\", \"password\": \"'</span>+psmRestPasswd+<span class=\"hljs-string\">'\"}'</span>)<br>.expect(<span class=\"hljs-number\">200</span>) <span class=\"hljs-comment\">// THis is HTTP response</span><br>.end(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, res</span>) </span>{<br>    <span class=\"hljs-keyword\">if</span> (!err) {<br>        response = res;<br>        <span class=\"hljs-keyword\">var</span> authToke = response.header[<span class=\"hljs-string\">'x-auth-token'</span>];<br>        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">'Auth Token from the Validate Login :'</span>+authToke);<br>        chai.expect(authToke).to.not.be.null;<br>        chai.expect(authToke).to.be.a(<span class=\"hljs-string\">'string'</span>);<br>        chai.expect(authToke.length).to.not.equal(<span class=\"hljs-number\">0</span>);<br>        done();<br>    } <span class=\"hljs-keyword\">else</span> {<br>        <span class=\"hljs-built_in\">console</span>.log(err);<br>        <span class=\"hljs-keyword\">throw</span> err;<br>    }<br>});",
//     "err": {
//     "name": "Error",
//     "message": "expected 200 \"OK\", got 502 \"Bad Gateway\"",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: expected <span class=\"hljs-number\">200</span> <span class=\"hljs-string\">\"OK\"</span>, got <span class=\"hljs-number\">502</span> <span class=\"hljs-string\">\"Bad Gateway\"</span><br>  at Test._assertStatus (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">266</span>:<span class=\"hljs-number\">12</span>)<br>  at Test._assertFunction (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">281</span>:<span class=\"hljs-number\">11</span>)<br>  at Test.assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">171</span>:<span class=\"hljs-number\">18</span>)<br>  at assert (node_modules/supertest/lib/test.js:<span class=\"hljs-number\">131</span>:<span class=\"hljs-number\">12</span>)<br>  at node_modules/supertest/lib/test.js:<span class=\"hljs-number\">128</span>:<span class=\"hljs-number\">5</span><br>  at Test.Request.callback (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">631</span>:<span class=\"hljs-number\">3</span>)<br>  at IncomingMessage.&lt;anonymous&gt; (node_modules/superagent/lib/node/index.js:<span class=\"hljs-number\">795</span>:<span class=\"hljs-number\">18</span>)<br>  at endReadableNT (_stream_readable.js:<span class=\"hljs-number\">974</span>:<span class=\"hljs-number\">12</span>)<br>  at _combinedTickCallback (internal/process/next_tick.js:<span class=\"hljs-number\">74</span>:<span class=\"hljs-number\">11</span>)<br>  at process._tickDomainCallback (internal/process/next_tick.js:<span class=\"hljs-number\">122</span>:<span class=\"hljs-number\">9</span>)<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "97810d91-b0ef-4553-8cd4-402564e3ff85",
//     "parentUUID": "7469a51b-6078-4833-a5bf-d9c394696173",
//     "skipped": Boolean
//     },
//     {
//     "title": "\"after each\" hook for \"should give me  X-AUTH-TOKEN toke in header\"",
//     "fullTitle": "PSM API Smoke Test - Login \"after each\" hook for \"should give me  X-AUTH-TOKEN toke in header\"",
//     "timedOut": Boolean,
//     "duration": 0,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "<span class=\"hljs-comment\">//if (this.currentTest.state == 'failed') {</span><br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"    Response body: \"</span> + util.inspect(response.body, {depth: <span class=\"hljs-literal\">null</span>, colors: <span class=\"hljs-literal\">Boolean</span>}) + <span class=\"hljs-string\">\"\\n\"</span>);<br><span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"    Response header: \"</span> + util.inspect(response.header, {depth: <span class=\"hljs-literal\">null</span>, colors: <span class=\"hljs-literal\">Boolean</span>}) + <span class=\"hljs-string\">\"\\n\"</span>);<br><span class=\"hljs-comment\">//}</span>",
//     "err": {
//     "name": "TypeError",
//     "message": "Cannot read property 'body' of undefined",
//     "stack": "<span class=\"hljs-built_in\">TypeError</span>: Cannot read property <span class=\"hljs-string\">'body'</span> <span class=\"hljs-keyword\">of</span> <span class=\"hljs-literal\">undefined</span><br>  at Context.&lt;anonymous&gt; (test/smoketests/psm/validate-login.js:<span class=\"hljs-number\">47</span>:<span class=\"hljs-number\">66</span>)<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "997f39e3-482e-428f-99b3-0df5fc6a9941",
//     "parentUUID": "7469a51b-6078-4833-a5bf-d9c394696173",
//     "skipped": Boolean
//     },
//     {
//     "title": "should allow valid user login",
//     "fullTitle": "PSM UI Smoke Test - Login should allow valid user login",
//     "timedOut": Boolean,
//     "duration": 120002,
//     "state": "failed",
//     "pass": Boolean,
//     "fail": Boolean,
//     "pending": Boolean,
//     "code": "driver.get(psmURL + <span class=\"hljs-string\">\"/#/login\"</span>);<br>driver.wait(until.titleContains(<span class=\"hljs-string\">'citySpaceUi'</span>), <span class=\"hljs-number\">120000</span>);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"password\"</span>)).sendKeys(psmWebPasswd);<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).clear();<br>driver.findElement(By.id(<span class=\"hljs-string\">\"username\"</span>)).sendKeys(psmWebUser);<br>driver.findElement(By.className(<span class=\"hljs-string\">\"btn-block\"</span>)).click()<br><span class=\"hljs-keyword\">var</span> signoutLink = driver.wait(until.elementLocated(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not locate element before timeout'</span>);<br>driver.wait(until.elementIsVisible(signoutLink), <span class=\"hljs-number\">120000</span>, <span class=\"hljs-string\">'Could not view element before timeout'</span>);<br>driver.takeScreenshot().then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">data</span>) </span>{<br>    writeScreenshot(data, <span class=\"hljs-string\">'valid user login.png'</span>);<br>});<br>driver.findElement(By.css(<span class=\"hljs-string\">\"span.user-signout\"</span>)).click();",
//     "err": {
//     "name": "Error",
//     "message": "Timeout of 120000ms exceeded. For async tests and hooks, ensure \"done()\" is called; if returning a Promise, ensure it resolves.",
//     "stack": "<span class=\"hljs-built_in\">Error</span>: Timeout <span class=\"hljs-keyword\">of</span> <span class=\"hljs-number\">120000</span>ms exceeded. For <span class=\"hljs-keyword\">async</span> tests and hooks, ensure <span class=\"hljs-string\">\"done()\"</span> is called; <span class=\"hljs-keyword\">if</span> returning a <span class=\"hljs-built_in\">Promise</span>, ensure it resolves.<br>"
//     },
//     "isRoot": Boolean,
//     "uuid": "c7e4ed35-8ea5-4412-b3c8-9178858b1519",
//     "parentUUID": "96ed0fa2-c86e-4e31-a70f-64541045bbc2",
//     "skipped": Boolean
//     }
//     ],
//     "copyrightYear": 2017
//     }]
// };